<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:a="clr-namespace:Edulink.Attached"
                    xmlns:conveter="clr-namespace:Edulink.Converters"
                    xmlns:icon="clr-namespace:Edulink.Controls.MaterialSymbol">
    <!--Converters-->
    <conveter:MarginToBorderRadiusConverter x:Key="MarginToBorderRadiusConverter"/>
    
    <Style x:Key="Title" TargetType="{x:Type TextBlock}">
        <Setter Property="FontSize" Value="32"/>
    </Style>
    <Style x:Key="Header" TargetType="{x:Type TextBlock}">
        <Setter Property="FontSize" Value="18"/>
    </Style>
    <Style x:Key="Body" TargetType="{x:Type TextBlock}">
        <Setter Property="FontSize" Value="14"/>
    </Style>

    <Style TargetType="{x:Type TextBlock}">
        <Setter Property="FontSize" Value="14"/>
    </Style>

    <Style TargetType="{x:Type Menu}">
        <Setter Property="Background" Value="{DynamicResource Background.Normal}"/>
        <Setter Property="BorderBrush" Value="{DynamicResource Border.Normal}"/>
        <Setter Property="Foreground" Value="{DynamicResource Foreground.Normal}"/>
        <Setter Property="FontFamily" Value="{Binding RelativeSource={RelativeSource AncestorType=Window}, Path=FontFamily}"/>
        <Setter Property="BorderThickness" Value="0,0,0,0"/>
        <Setter Property="FontSize" Value="14"/>
        <Setter Property="Margin" Value="0"/>
        <Setter Property="Padding" Value="0"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="a:CornerRadiusHelper.CornerRadius" Value="0"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Menu}">
                    <Border Background="{TemplateBinding Background}"
                            CornerRadius="{TemplateBinding a:CornerRadiusHelper.CornerRadius}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            Padding="{TemplateBinding Padding}"
                            SnapsToDevicePixels="true">
                        <ItemsPresenter SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    
    <Style TargetType="{x:Type MenuItem}">
        <Setter Property="Background" Value="{DynamicResource Background.Normal}"/>
        <Setter Property="BorderBrush" Value="{DynamicResource Border.Normal}"/>
        <Setter Property="Margin" Value="2"/>
        <Setter Property="Padding" Value="6,4"/>
        <Setter Property="a:CornerRadiusHelper.CornerRadius" Value="6"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="MenuItem">
                    <Grid>
                        <Grid.RowDefinitions>
                            <RowDefinition Height="Auto"/>
                            <RowDefinition Height="*"/>
                        </Grid.RowDefinitions>
                        <Border x:Name="Border"
                                Background="{TemplateBinding Background}"
                                CornerRadius="{TemplateBinding a:CornerRadiusHelper.CornerRadius}"
                                Padding="{TemplateBinding Padding}">
                            <DockPanel>
                                <!-- Icon -->
                                <ContentPresenter ContentSource="Icon" 
                                                  DockPanel.Dock="Left"
                                                  Margin="0,0,0,0"
                                                  VerticalAlignment="Center"
                                                  HorizontalAlignment="Center"/>

                                <!-- Header text -->
                                <ContentPresenter ContentSource="Header"
                                                  DockPanel.Dock="Right"
                                                  RecognizesAccessKey="True"
                                                  VerticalAlignment="Center"/>
                            </DockPanel>
                        </Border>
                        <!-- Popup for dropdown items -->
                        <Popup x:Name="SubmenuPopup"
                               MinWidth="120"
                               Placement="Bottom"
                               AllowsTransparency="True"
                               Focusable="False"
                               IsOpen="{Binding IsSubmenuOpen, RelativeSource={RelativeSource TemplatedParent}}"
                               PopupAnimation="Fade">
                            <Border Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="1" CornerRadius="6" >
                                <StackPanel IsItemsHost="True" KeyboardNavigation.DirectionalNavigation="Cycle"/>
                            </Border>
                        </Popup>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="Border" Property="Background" Value="{DynamicResource Background.Hover}"/>
                            <Setter TargetName="Border" Property="BorderBrush" Value="{DynamicResource Border.Hover}"/>
                        </Trigger>
                        <Trigger Property="IsChecked" Value="True">
                            <Setter TargetName="Border" Property="Background" Value="{DynamicResource Background.Pressed}"/>
                            <Setter TargetName="Border" Property="BorderBrush" Value="{DynamicResource Border.Pressed}"/>
                        </Trigger>
                        <Trigger Property="IsSubmenuOpen" Value="True">
                            <Setter TargetName="Border" Property="Background" Value="{DynamicResource Background.Pressed}"/>
                            <Setter TargetName="Border" Property="BorderBrush" Value="{DynamicResource Border.Pressed}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--This refuses to work so I refused to make it work-->
    <Style TargetType="{x:Type Separator}">
        <Setter Property="HorizontalAlignment" Value="Stretch"/>
        <Setter Property="Height" Value="1"/>
        <Setter Property="Margin" Value="0,1"/>
        <Setter Property="Background" Value="{DynamicResource Border.Normal}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Separator}">
                    <Grid>
                        <Border Background="{TemplateBinding Background}" Height="{TemplateBinding Height}" Margin="{TemplateBinding Margin}" Padding="{TemplateBinding Padding}"/>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="{x:Type TextBox}">
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="BorderBrush" Value="{DynamicResource Border.Normal}"/>
        <Setter Property="Foreground" Value="{DynamicResource Foreground.Normal}"/>
        <Setter Property="CaretBrush" Value="{DynamicResource Foreground.Normal}"/>
        <Setter Property="FontFamily" Value="{Binding RelativeSource={RelativeSource AncestorType=Window}, Path=FontFamily}"/>
        <Setter Property="MinWidth" Value="80"/>
        <Setter Property="Height" Value="28"/>
        <Setter Property="FontSize" Value="14"/>
        <Setter Property="Padding" Value="4"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="SnapsToDevicePixels" Value="True"/>
        <Setter Property="UseLayoutRounding" Value="True"/>
        <Setter Property="a:CornerRadiusHelper.CornerRadius" Value="5"/>
        <Setter Property="a:PlaceholderHelper.Placeholder" Value="{x:Null}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TextBox}">
                    <Grid>
                        <Border x:Name="Border"
                            CornerRadius="{TemplateBinding a:CornerRadiusHelper.CornerRadius}"
                            BorderBrush="{TemplateBinding BorderBrush}" 
                            BorderThickness="{TemplateBinding BorderThickness}" 
                            Background="{TemplateBinding Background}">
                            <ScrollViewer x:Name="PART_ContentHost" 
                                      Focusable="false" 
                                      HorizontalScrollBarVisibility="Hidden" 
                                      VerticalScrollBarVisibility="Hidden"/>
                        </Border>
                        <TextBlock x:Name="PlaceholderText"
                               IsHitTestVisible="False" 
                               Visibility="Collapsed"
                               Text="{TemplateBinding a:PlaceholderHelper.Placeholder}" 
                               FontFamily="{TemplateBinding FontFamily}" 
                               FontSize="{TemplateBinding FontSize}" 
                               Padding="{TemplateBinding Padding}" 
                               Margin="3,1,3,0"
                               VerticalAlignment="{TemplateBinding VerticalContentAlignment}" 
                               HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" 
                               Foreground="{DynamicResource Foreground.Disabled}">
                        </TextBlock>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="Text" Value="">
                            <Setter Property="Visibility" TargetName="PlaceholderText" Value="Visible"/>
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="Border" Property="BorderBrush" Value="{DynamicResource Border.Hover}"/>
                        </Trigger>
                        <Trigger Property="IsFocused" Value="True">
                            <Setter TargetName="Border" Property="BorderBrush" Value="{DynamicResource Border.Pressed}"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter TargetName="Border" Property="BorderBrush" Value="{DynamicResource Border.Disabled}"/>
                            <Setter Property="Foreground" Value="{DynamicResource Foreground.Disabled}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style TargetType="{x:Type PasswordBox}">
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="BorderBrush" Value="{DynamicResource Border.Normal}"/>
        <Setter Property="Foreground" Value="{DynamicResource Foreground.Normal}"/>
        <Setter Property="CaretBrush" Value="{DynamicResource Foreground.Normal}"/>
        <Setter Property="FontFamily" Value="{Binding RelativeSource={RelativeSource AncestorType=Window}, Path=FontFamily}"/>
        <Setter Property="MinWidth" Value="80"/>
        <Setter Property="Height" Value="28"/>
        <Setter Property="FontSize" Value="14"/>
        <Setter Property="Padding" Value="4"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="SnapsToDevicePixels" Value="True"/>
        <Setter Property="UseLayoutRounding" Value="True"/>
        <Setter Property="a:CornerRadiusHelper.CornerRadius" Value="6"/>
        <Setter Property="a:PasswordBoxHelper.ListenToLength" Value="True"/>
        <Setter Property="a:PlaceholderHelper.Placeholder" Value="{x:Null}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type PasswordBox}">
                    <Grid>
                        <Border x:Name="Border"
                                CornerRadius="{TemplateBinding a:CornerRadiusHelper.CornerRadius}"
                                BorderBrush="{TemplateBinding BorderBrush}" 
                                BorderThickness="{TemplateBinding BorderThickness}" 
                                Background="{TemplateBinding Background}">
                            <ScrollViewer x:Name="PART_ContentHost"
                                          Focusable="false" 
                                          HorizontalScrollBarVisibility="Hidden" 
                                          VerticalScrollBarVisibility="Hidden"/>
                        </Border>
                        <TextBlock x:Name="PlaceholderText"
                                   IsHitTestVisible="False" 
                                   Visibility="Collapsed"
                                   Text="{TemplateBinding a:PlaceholderHelper.Placeholder}" 
                                   FontFamily="{TemplateBinding FontFamily}" 
                                   FontSize="{TemplateBinding FontSize}" 
                                   Padding="{TemplateBinding Padding}" 
                                   Margin="3,0,3,0"
                                   VerticalAlignment="{TemplateBinding VerticalContentAlignment}" 
                                   HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" 
                                   Foreground="{DynamicResource Foreground.Disabled}">
                        </TextBlock>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="a:PasswordBoxHelper.InputLength" Value="0">
                            <Setter Property="Visibility" TargetName="PlaceholderText" Value="Visible"/>
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="Border" Property="BorderBrush" Value="{DynamicResource Border.Hover}"/>
                        </Trigger>
                        <Trigger Property="IsFocused" Value="True">
                            <Setter TargetName="Border" Property="BorderBrush" Value="{DynamicResource Border.Pressed}"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter TargetName="Border" Property="BorderBrush" Value="{DynamicResource Border.Disabled}"/>
                            <Setter Property="Foreground" Value="{DynamicResource Foreground.Disabled}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="{x:Type ProgressBar}">
        <Setter Property="Foreground" Value="{DynamicResource Background.Normal}"/>
        <Setter Property="BorderBrush" Value="{DynamicResource Border.Normal}"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="Height" Value="12"/>
        <Setter Property="SnapsToDevicePixels" Value="True"/>
        <Setter Property="UseLayoutRounding" Value="True"/>
        <Setter Property="a:CornerRadiusHelper.CornerRadius" Value="6"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ProgressBar}">
                    <Grid x:Name="TemplateRoot">
                        <Border Background="{TemplateBinding Background}" 
                                BorderBrush="{TemplateBinding BorderBrush}" 
                                BorderThickness="{TemplateBinding BorderThickness}" 
                                CornerRadius="{TemplateBinding a:CornerRadiusHelper.CornerRadius}">
                            <Grid>
                                <Border x:Name="PART_Track" 
                                        Background="{TemplateBinding Background}" 
                                        CornerRadius="{TemplateBinding a:CornerRadiusHelper.CornerRadius}"/>

                                <Border x:Name="PART_Indicator" 
                                        Background="{TemplateBinding Foreground}"
                                        HorizontalAlignment="Left">
                                    <Border.Style>
                                        <Style TargetType="Border">
                                            <Setter Property="CornerRadius" Value="5,0,0,5"/>
                                            <Style.Triggers>
                                                <DataTrigger Binding="{Binding Path=Value, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ProgressBar}}}" Value="100">
                                                    <Setter Property="CornerRadius" Value="5"/>
                                                </DataTrigger>
                                            </Style.Triggers>
                                        </Style>
                                    </Border.Style>
                                </Border>
                            </Grid>
                        </Border>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    
    <Style TargetType="{x:Type CheckBox}">
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="BorderBrush" Value="{DynamicResource Border.Normal}"/>
        <Setter Property="FontFamily" Value="{Binding RelativeSource={RelativeSource AncestorType=Window}, Path=FontFamily}"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="SnapsToDevicePixels" Value="True"/>
        <Setter Property="UseLayoutRounding" Value="True"/>
        <Setter Property="a:CornerRadiusHelper.CornerRadius" Value="6"/>
        <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type CheckBox}">
                    <Grid>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="Auto"/>
                            <ColumnDefinition Width="*"/>
                        </Grid.ColumnDefinitions>
                        <Border x:Name="CheckBox" 
                                Background="{TemplateBinding Background}" 
                                BorderBrush="{TemplateBinding BorderBrush}" 
                                BorderThickness="{TemplateBinding BorderThickness}" 
                                CornerRadius="{TemplateBinding a:CornerRadiusHelper.CornerRadius}"
                                Width="20" 
                                Height="20" />
                        
                        <Border x:Name="FocusVisual"
                                BorderBrush="{DynamicResource Border.Pressed}"
                                BorderThickness="1"
                                Margin="-2"
                                Visibility="Collapsed">
                            <Border.CornerRadius>
                                <MultiBinding Converter="{StaticResource MarginToBorderRadiusConverter}">
                                    <Binding Path="(a:CornerRadiusHelper.CornerRadius)" RelativeSource="{RelativeSource TemplatedParent}"/>
                                    <Binding Path="Margin" RelativeSource="{RelativeSource Self}"/>
                                </MultiBinding>
                            </Border.CornerRadius>
                        </Border>

                        <icon:MaterialSymbol x:Name="CheckMark"
                                             Kind="Check"
                                             SymbolSize="10"
                                             Width="10"
                                             Height="10"
                                             SymbolBrush="{TemplateBinding Foreground}"
                                             Visibility="Collapsed"
                                             VerticalAlignment="Center"
                                             HorizontalAlignment="Center"/>

                        <ContentPresenter Grid.Column="1" 
                                          VerticalAlignment="{TemplateBinding VerticalContentAlignment}" 
                                          Content="{TemplateBinding Content}" 
                                          ContentTemplate="{TemplateBinding ContentTemplate}" 
                                          Margin="5,0,0,0" />
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsChecked" Value="True">
                            <Setter TargetName="CheckMark" Property="Visibility" Value="Visible" />
                            <Setter TargetName="CheckBox" Property="Background" Value="{DynamicResource Background.Normal}"/>
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="CheckBox" Property="BorderBrush" Value="{DynamicResource Border.Hover}" />
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter TargetName="CheckBox" Property="BorderBrush" Value="{DynamicResource Border.Pressed}" />
                            <Setter TargetName="CheckBox" Property="Background" Value="{DynamicResource Background.Pressed}" />
                        </Trigger>
                        <Trigger Property="IsFocused" Value="True">
                            <Setter TargetName="FocusVisual" Property="Visibility" Value="Visible"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>

    </Style>

    <!-- Button Style -->
    <Style TargetType="{x:Type Button}">
        <Setter Property="Background" Value="{DynamicResource Background.Normal}"/>
        <Setter Property="BorderBrush" Value="{DynamicResource Border.Normal}"/>
        <Setter Property="Foreground" Value="{DynamicResource Foreground.Normal}"/>
        <Setter Property="FontFamily" Value="{Binding RelativeSource={RelativeSource AncestorType=Window}, Path=FontFamily}"/>
        <Setter Property="FontSize" Value="14"/>
        <Setter Property="MinWidth" Value="80"/>
        <Setter Property="Height" Value="28"/>
        <Setter Property="Padding" Value="6,0,6,0"/>
        <Setter Property="SnapsToDevicePixels" Value="True"/>
        <Setter Property="UseLayoutRounding" Value="True"/>
        <Setter Property="a:CornerRadiusHelper.CornerRadius" Value="6"/>
        <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Grid>
                        <Border x:Name="Border"
                                CornerRadius="{TemplateBinding a:CornerRadiusHelper.CornerRadius}"
                                Background="{TemplateBinding Background}"
                                BorderBrush="{TemplateBinding BorderBrush}"
                                BorderThickness="{TemplateBinding BorderThickness}"
                                Padding="{TemplateBinding Padding}">
                            <StackPanel Orientation="Horizontal" HorizontalAlignment="Center" VerticalAlignment="Center">
                                <!-- Icon -->
                                <ContentPresenter x:Name="IconPresenter"
                                                  Content="{Binding Path=(a:IconHelper.Icon), RelativeSource={RelativeSource TemplatedParent}}"
                                                  VerticalAlignment="Center"
                                                  HorizontalAlignment="Center"
                                                  Visibility="Visible" Margin="0,0,5,0"/>
                                <!-- Content -->
                                <ContentPresenter Content="{TemplateBinding Content}"
                                                  ContentTemplate="{TemplateBinding ContentTemplate}"
                                                  HorizontalAlignment="Center"
                                                  VerticalAlignment="Center"
                                                  Margin="0,0,0,0" />
                            </StackPanel>
                        </Border>
                        <Border x:Name="FocusVisual"
                                BorderBrush="{DynamicResource Border.Pressed}"
                                BorderThickness="1"
                                Margin="-2"
                                Visibility="Collapsed">
                            <Border.CornerRadius>
                                <MultiBinding Converter="{StaticResource MarginToBorderRadiusConverter}">
                                    <Binding Path="(a:CornerRadiusHelper.CornerRadius)" RelativeSource="{RelativeSource TemplatedParent}"/>
                                    <Binding Path="Margin" RelativeSource="{RelativeSource Self}"/>
                                </MultiBinding>
                            </Border.CornerRadius>
                        </Border>
                    </Grid>

                    <ControlTemplate.Triggers>
                        <Trigger Property="a:IconHelper.Icon" Value="{x:Null}">
                            <Setter TargetName="IconPresenter" Property="Visibility" Value="Collapsed" />
                        </Trigger>

                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="Border" Property="Background" Value="{DynamicResource Background.Hover}" />
                            <Setter TargetName="Border" Property="BorderBrush" Value="{DynamicResource Border.Hover}" />
                        </Trigger>

                        <Trigger Property="IsPressed" Value="True">
                            <Setter TargetName="Border" Property="Background" Value="{DynamicResource Background.Pressed}" />
                            <Setter TargetName="Border" Property="BorderBrush" Value="{DynamicResource Border.Pressed}" />
                        </Trigger>

                        <Trigger Property="IsEnabled" Value="False">
                            <Setter TargetName="Border" Property="Background" Value="{DynamicResource Background.Disabled}" />
                            <Setter TargetName="Border" Property="BorderBrush" Value="{DynamicResource Border.Disabled}" />
                            <Setter Property="Foreground" Value="{DynamicResource Foreground.Disabled}" />
                        </Trigger>

                        <Trigger Property="IsKeyboardFocused" Value="True">
                            <Setter TargetName="FocusVisual" Property="Visibility" Value="Visible"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--ListBox-->
    <Style TargetType="{x:Type ListBox}">
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="BorderBrush" Value="{DynamicResource Border.Normal}"/>
        <Setter Property="Foreground" Value="{DynamicResource Foreground.Normal}"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="Padding" Value="2"/>
        <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Auto"/>
        <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto"/>
        <Setter Property="ScrollViewer.CanContentScroll" Value="True"/>
        <Setter Property="SnapsToDevicePixels" Value="True"/>
        <Setter Property="UseLayoutRounding" Value="True"/>
        <Setter Property="a:CornerRadiusHelper.CornerRadius" Value="6"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ListBox}">
                    <Border Background="{TemplateBinding Background}" 
                            BorderBrush="{TemplateBinding BorderBrush}" 
                            BorderThickness="{TemplateBinding BorderThickness}" 
                            CornerRadius="{TemplateBinding a:CornerRadiusHelper.CornerRadius}"
                            Padding="{TemplateBinding Padding}">
                        <ScrollViewer Focusable="False">
                            <ItemsPresenter />
                        </ScrollViewer>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="BorderBrush" Value="{DynamicResource Border.Disabled}"/>
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="RoundedListBoxItem" TargetType="{x:Type ListBoxItem}">
        <Setter Property="Background" Value="{DynamicResource Background.Disabled}"/>
        <Setter Property="BorderBrush" Value="{DynamicResource Border.Disabled}"/>
        <Setter Property="Foreground" Value="{DynamicResource Foreground.Normal}"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="FontSize" Value="14"/>
        <Setter Property="Padding" Value="5"/>
        <Setter Property="Margin" Value="2"/>
        <Setter Property="SnapsToDevicePixels" Value="True"/>
        <Setter Property="UseLayoutRounding" Value="True"/>
        <Setter Property="a:CornerRadiusHelper.CornerRadius" Value="6"/>
        <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ListBoxItem}">
                    <Grid>
                        <Border CornerRadius="{TemplateBinding a:CornerRadiusHelper.CornerRadius}"
                                Margin="{TemplateBinding Margin}"
                                Padding="{TemplateBinding Padding}"
                                Background="{TemplateBinding Background}" 
                                BorderBrush="{TemplateBinding BorderBrush}" 
                                BorderThickness="{TemplateBinding BorderThickness}"
                                SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                UseLayoutRounding="{TemplateBinding UseLayoutRounding}">
                            <ContentPresenter/>
                        </Border>
                        <Border x:Name="FocusVisual"
                                BorderBrush="{DynamicResource Border.Pressed}"
                                BorderThickness="1"
                                Margin="0"
                                Visibility="Collapsed">
                            <Border.CornerRadius>
                                <MultiBinding Converter="{StaticResource MarginToBorderRadiusConverter}">
                                    <Binding Path="(a:CornerRadiusHelper.CornerRadius)" RelativeSource="{RelativeSource TemplatedParent}"/>
                                    <Binding Path="Margin" RelativeSource="{RelativeSource Self}"/>
                                </MultiBinding>
                            </Border.CornerRadius>
                        </Border>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsKeyboardFocused" Value="True">
                            <Setter TargetName="FocusVisual" Property="Visibility" Value="Visible"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" Value="{DynamicResource Background.Normal}"/>
                <Setter Property="BorderBrush" Value="{DynamicResource Border.Normal}"/>
            </Trigger>
            <Trigger Property="IsSelected" Value="True">
                <Setter Property="Background" Value="{DynamicResource Background.Hover}"/>
                <Setter Property="BorderBrush" Value="{DynamicResource Border.Hover}"/>
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Background" Value="{DynamicResource Background.Disabled}"/>
                <Setter Property="BorderBrush" Value="{DynamicResource Border.Disabled}"/>
                <Setter Property="Foreground" Value="{DynamicResource Foreground.Disabled}"/>
            </Trigger>
        </Style.Triggers>
    </Style>
    
    <!-- ComboBox -->
    <ControlTemplate TargetType="{x:Type ToggleButton}" x:Key="ComboBoxToggleButtonTemplate">
        <Grid>
            <Grid.ColumnDefinitions>
                <ColumnDefinition/>
                <ColumnDefinition Width="25"/>
            </Grid.ColumnDefinitions>
            <Border x:Name="Border" Grid.ColumnSpan="2"
                    Background="{TemplateBinding Background}"
                    BorderBrush="{TemplateBinding BorderBrush}" 
                    CornerRadius="{TemplateBinding a:CornerRadiusHelper.CornerRadius}"
                    BorderThickness="{TemplateBinding BorderThickness}"/>
            <icon:MaterialSymbol Grid.Column="1"
                                 x:Name="Arrow"
                                 Kind="ArrowDropDown"
                                 SymbolSize="8"
                                 SymbolBrush="{TemplateBinding Foreground}"
                                 VerticalAlignment="Center"
                                 HorizontalAlignment="Center"/>
        </Grid>
        <ControlTemplate.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" TargetName="Border" Value="{DynamicResource Background.Hover}"/>
                <Setter Property="BorderBrush" TargetName="Border" Value="{DynamicResource Border.Hover}"/>
            </Trigger>
            <Trigger Property="IsChecked" Value="True">
                <Setter Property="Background" TargetName="Border" Value="{DynamicResource Background.Pressed}"/>
                <Setter Property="BorderBrush" TargetName="Border" Value="{DynamicResource Border.Pressed}"/>
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Background" TargetName="Border" Value="{DynamicResource Background.Disabled}"/>
                <Setter Property="BorderBrush" TargetName="Border" Value="{DynamicResource Border.Disabled}"/>
                <Setter Property="Foreground" Value="{DynamicResource Foreground.Disabled}"/>
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <Style TargetType="{x:Type ComboBox}">
        <Setter Property="Background" Value="{DynamicResource Background.Normal}"/>
        <Setter Property="BorderBrush" Value="{DynamicResource Border.Normal}"/>
        <Setter Property="Foreground" Value="{DynamicResource Foreground.Normal}"/>
        <Setter Property="FontFamily" Value="{Binding RelativeSource={RelativeSource AncestorType=Window}, Path=FontFamily}"/>
        <Setter Property="Height" Value="28"/>
        <Setter Property="MinWidth" Value="40"/>
        <Setter Property="FontSize" Value="14"/>
        <Setter Property="Padding" Value="6"/>
        <Setter Property="SnapsToDevicePixels" Value="True"/>
        <Setter Property="UseLayoutRounding" Value="True"/>
        <Setter Property="OverridesDefaultStyle" Value="True"/>
        <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Auto"/>
        <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto"/>
        <Setter Property="ScrollViewer.CanContentScroll" Value="True"/>
        <Setter Property="a:CornerRadiusHelper.CornerRadius" Value="6"/>
        <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ComboBox}">
                    <Grid>
                        <ToggleButton x:Name="ToggleButton" Grid.Column="2"
                                      a:CornerRadiusHelper.CornerRadius="{TemplateBinding a:CornerRadiusHelper.CornerRadius}"
                                      Background="{TemplateBinding Background}"
                                      BorderBrush="{TemplateBinding BorderBrush}"
                                      Foreground="{TemplateBinding Foreground}"
                                      ClickMode="Press" Focusable="False"
                                      IsChecked="{Binding Path=IsDropDownOpen, RelativeSource={RelativeSource TemplatedParent}, Mode=TwoWay}"
                                      Template="{StaticResource ComboBoxToggleButtonTemplate}"/>
                        <Border x:Name="FocusVisual"
                                BorderBrush="{DynamicResource Border.Pressed}"
                                BorderThickness="1"
                                Margin="-2"
                                Visibility="Collapsed">
                            <Border.CornerRadius>
                                <MultiBinding Converter="{StaticResource MarginToBorderRadiusConverter}">
                                    <Binding Path="(a:CornerRadiusHelper.CornerRadius)" RelativeSource="{RelativeSource TemplatedParent}"/>
                                    <Binding Path="Margin" RelativeSource="{RelativeSource Self}"/>
                                </MultiBinding>
                            </Border.CornerRadius>
                        </Border>
                        <ContentPresenter Name="ContentSite" Margin="8 5,22,5" IsHitTestVisible="False"
                                      HorizontalAlignment="Left" VerticalAlignment="Center"
                                      Content="{TemplateBinding ComboBox.SelectionBoxItem}" 
                                      ContentTemplate="{TemplateBinding ComboBox.SelectionBoxItemTemplate}"
                                      ContentTemplateSelector="{TemplateBinding ItemTemplateSelector}"/>
                        <TextBox x:Name="PART_EditableTextBox" Margin="8,5,22,5"
                             IsReadOnly="{TemplateBinding IsReadOnly}"
                             Visibility="Hidden" Background="Transparent"
                             HorizontalAlignment="Left" VerticalAlignment="Center"
                             Focusable="True">
                            <TextBox.Template>
                                <ControlTemplate TargetType="TextBox">
                                    <Border Name="PART_ContentHost" Focusable="False" />
                                </ControlTemplate>
                            </TextBox.Template>
                        </TextBox>

                        <!-- Popup showing items -->
                        <Popup x:Name="Popup" Placement="Bottom"
                               Focusable="False" AllowsTransparency="True"
                               IsOpen="{TemplateBinding ComboBox.IsDropDownOpen}"
                               PopupAnimation="Slide">
                            <Grid x:Name="DropDown" SnapsToDevicePixels="True"
                                  MinWidth="{TemplateBinding FrameworkElement.ActualWidth}"
                                  MaxHeight="{TemplateBinding ComboBox.MaxDropDownHeight}">
                                <Border x:Name="DropDownBorder"
                                        Background="{DynamicResource Background.Normal}"
                                        BorderBrush="{DynamicResource Border.Normal}"
                                        Padding="0,1,0,0"
                                        CornerRadius="6"
                                        BorderThickness="1"/>
                                <ScrollViewer Margin="3" SnapsToDevicePixels="True">
                                    <ItemsPresenter KeyboardNavigation.DirectionalNavigation="Contained" />
                                </ScrollViewer>
                            </Grid>
                        </Popup>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="UIElement.IsEnabled" Value="False">
                            <Setter Property="TextElement.Foreground" Value="{DynamicResource Foreground.Disabled}"/>
                        </Trigger>
                        <Trigger Property="IsFocused" Value="True">
                            <Setter TargetName="FocusVisual" Property="Visibility" Value="Visible"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="{x:Type ComboBoxItem}">
        <Setter Property="SnapsToDevicePixels" Value="True" />
        <Setter Property="Background" Value="{DynamicResource Background.Normal}" />
        <Setter Property="BorderBrush" Value="{DynamicResource Border.Normal}" />
        <Setter Property="Foreground" Value="{DynamicResource Foreground.Normal}" />
        <Setter Property="Padding" Value="5,3" />
        <Setter Property="HorizontalContentAlignment" Value="Stretch" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ComboBoxItem}">
                    <Border x:Name="Border"
                            Background="{TemplateBinding Background}"
                            CornerRadius="6"
                            BorderThickness="{Binding BorderThinkness}"
                            Padding="{TemplateBinding Padding}">
                        <ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                          VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="Border" Property="Background" Value="{DynamicResource Background.Hover}" />
                            <Setter TargetName="Border" Property="BorderBrush" Value="{DynamicResource Border.Hover}" />
                        </Trigger>
                        <Trigger Property="IsFocused" Value="True">
                            <Setter TargetName="Border" Property="Background" Value="{DynamicResource Background.Hover}" />
                            <Setter TargetName="Border" Property="BorderBrush" Value="{DynamicResource Border.Hover}" />
                        </Trigger>
                        <Trigger Property="UIElement.IsEnabled" Value="False">
                            <Setter TargetName="Border" Property="Background" Value="{DynamicResource Background.Disabled}" />
                            <Setter Property="TextElement.Foreground" Value="{DynamicResource Foreground.Disabled}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--Tooltip-->
    <Style TargetType="{x:Type ToolTip}">
        <Setter Property="Background" Value="{DynamicResource Background}" />
        <Setter Property="BorderBrush" Value="{DynamicResource Border.Normal}" />
        <Setter Property="Foreground" Value="{DynamicResource Foreground.Normal}" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="Padding" Value="5" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToolTip}">
                    <Border 
                        Background="{TemplateBinding Background}" 
                        BorderBrush="{TemplateBinding BorderBrush}"
                        BorderThickness="{TemplateBinding BorderThickness}" 
                        CornerRadius="6">
                        <!-- Rounded corners -->
                        <ContentPresenter Margin="{TemplateBinding Padding}" 
                                          Content="{TemplateBinding Content}" 
                                          HorizontalAlignment="Center"
                                          VerticalAlignment="Center"/>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
</ResourceDictionary>